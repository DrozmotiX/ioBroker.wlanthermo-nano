{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.1.1\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\nimport axios from 'axios'; // Load Axios module to allow handle http get & post\nimport { MyObjectsDefinitions, BasicStates, buildCommon } from './lib/stateDefinitions';\n\nconst activeDevices: activeDevices = {};\nconst polling: { [key: string]: object } = {};\nconst ipSerialMapping: { [key: string]: { ip: string } } = {};\nconst createdObjs: string[] = [];\nlet initializing = true;\n\nclass WlanthermoNano extends utils.Adapter {\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: 'wlanthermo-nano',\n\t\t});\n\t\tthis.on('ready', this.onReady.bind(this));\n\t\tthis.on('stateChange', this.onStateChange.bind(this));\n\t\tthis.on('unload', this.onUnload.bind(this));\n\t}\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\tthis.setState('info.connection', false, true);\n\t\tconst devices: DeviceList = this.config.deviceList;\n\t\tthis.log.info(`WLANThermo startet, loading ${devices.length} devices`);\n\t\tthis.log.debug(`Configured  devices ${devices}`);\n\n\t\t// Connect to all devices configured in Adapter Instance\n\t\tlet amountConnected = 0;\n\t\tfor (const device in devices) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t//@ts-expect-error <Array Preparation, not all attributes present yet>\n\t\t\tactiveDevices[devices[device].ip] = {};\n\t\t\tactiveDevices[devices[device].ip].basicInfo = devices[device];\n\t\t\tactiveDevices[devices[device].ip].initialised = false;\n\t\t\t// Start interval\n\t\t\tawait this.getDeviceData(devices[device].ip);\n\t\t\tif (activeDevices[devices[device].ip].initialised) {\n\t\t\t\tamountConnected = amountConnected + 1;\n\t\t\t}\n\t\t}\n\n\t\t// Adapter ready\n\t\tinitializing = false;\n\t\tthis.log.info(`WLANThermo ready, ${amountConnected} device(s) connected`);\n\t\tthis.setState('info.connection', true, true);\n\t}\n\n\tprivate async getDeviceData(deviceIP: string): Promise<void> {\n\t\ttry {\n\t\t\tif (\n\t\t\t\tactiveDevices[deviceIP] == null ||\n\t\t\t\tactiveDevices[deviceIP].deviceURL == null ||\n\t\t\t\t!activeDevices[deviceIP].initialised\n\t\t\t) {\n\t\t\t\tthis.log.debug(`${deviceIP} not initialised, try to connect`);\n\t\t\t\tawait this.initialiseDevice(deviceIP);\n\t\t\t} else {\n\t\t\t\tthis.log.debug(`${deviceIP} initialised, update data`);\n\t\t\t\tconst response_deviceData = await axios(activeDevices[deviceIP].deviceURL + '/data', { timeout: 5000 });\n\t\t\t\tactiveDevices[deviceIP].data = response_deviceData.data;\n\t\t\t\tthis.log.debug(`${deviceIP} data | ${JSON.stringify(response_deviceData.data)}`);\n\t\t\t\tconst serial: string = activeDevices[deviceIP].settings.device.serial;\n\n\t\t\t\t// Write states for configuration channel\n\t\t\t\tfor (const i in activeDevices[deviceIP].data.system) {\n\t\t\t\t\tconst value = activeDevices[deviceIP].data.system[i];\n\t\t\t\t\tthis.log.debug(`Create configuration state ${serial}.Configuration.${i} | ${value}`);\n\t\t\t\t\tawait this.setObjectAndState(`${serial}.Configuration`, `${i}`, value);\n\t\t\t\t}\n\n\t\t\t\t// Read all sensor related settings and write to states\n\t\t\t\tconst channel = activeDevices[deviceIP].data.channel;\n\t\t\t\tfor (const i in channel) {\n\t\t\t\t\tconst sensorRoot = `${serial}.Sensors.Sensor_${1 + parseInt(i)}`;\n\t\t\t\t\tthis.log.debug(`Create sensor states ${sensorRoot}`);\n\t\t\t\t\tawait this.setObjectNotExistsAsync(sensorRoot, {\n\t\t\t\t\t\ttype: 'channel',\n\t\t\t\t\t\tcommon: {\n\t\t\t\t\t\t\tname: channel[i].name,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnative: {},\n\t\t\t\t\t});\n\n\t\t\t\t\t// Load available sensor types\n\t\t\t\t\tconst sensorTypes: { [key: string]: string } = {};\n\t\t\t\t\tfor (const sensor in activeDevices[deviceIP].settings.sensors) {\n\t\t\t\t\t\tsensorTypes[sensor] = activeDevices[deviceIP].settings.sensors[sensor].name;\n\t\t\t\t\t}\n\n\t\t\t\t\t//  Write states for temperature sensors\n\t\t\t\t\tfor (const y in channel[i]) {\n\t\t\t\t\t\tswitch (y) {\n\t\t\t\t\t\t\tcase 'typ':\n\t\t\t\t\t\t\t\tawait this.setObjectNotExistsAsync(`${sensorRoot}.${y}`, {\n\t\t\t\t\t\t\t\t\ttype: 'state',\n\t\t\t\t\t\t\t\t\tcommon: {\n\t\t\t\t\t\t\t\t\t\tname: y,\n\t\t\t\t\t\t\t\t\t\trole: 'switch.mode',\n\t\t\t\t\t\t\t\t\t\tread: true,\n\t\t\t\t\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\t\t\t\t\twrite: true,\n\t\t\t\t\t\t\t\t\t\tstates: sensorTypes,\n\t\t\t\t\t\t\t\t\t\tdef: 0,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tnative: {},\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tthis.setState(`${sensorRoot}.${y}`, { val: channel[i][y], ack: true });\n\t\t\t\t\t\t\t\tthis.subscribeStates(`${sensorRoot}.${y}`);\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'alarm':\n\t\t\t\t\t\t\t\tawait this.setObjectNotExistsAsync(`${sensorRoot}.${y}`, {\n\t\t\t\t\t\t\t\t\ttype: 'state',\n\t\t\t\t\t\t\t\t\tcommon: {\n\t\t\t\t\t\t\t\t\t\tname: y,\n\t\t\t\t\t\t\t\t\t\trole: 'indicator.alarm',\n\t\t\t\t\t\t\t\t\t\tread: true,\n\t\t\t\t\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\t\t\t\t\twrite: false,\n\t\t\t\t\t\t\t\t\t\tstates: {\n\t\t\t\t\t\t\t\t\t\t\t'0': 'Disabled',\n\t\t\t\t\t\t\t\t\t\t\t'1': 'Push-Only',\n\t\t\t\t\t\t\t\t\t\t\t'2': 'Speaker-Only',\n\t\t\t\t\t\t\t\t\t\t\t'4': 'Push & Speaker',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tdef: 0,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tnative: {},\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tthis.setState(`${sensorRoot}.${y}`, { val: channel[i][y], ack: true });\n\t\t\t\t\t\t\t\tthis.subscribeStates(`${sensorRoot}.${y}`);\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'temp':\n\t\t\t\t\t\t\t\tawait this.setObjectAndState(`${sensorRoot}`, `${y}`, null);\n\t\t\t\t\t\t\t\tif (channel[i][y] !== 999) {\n\t\t\t\t\t\t\t\t\tthis.setState(`${sensorRoot}.${y}`, {\n\t\t\t\t\t\t\t\t\t\tval: channel[i][y],\n\t\t\t\t\t\t\t\t\t\tack: true,\n\t\t\t\t\t\t\t\t\t\texpire: activeDevices[deviceIP].basicInfo.interval * 2000,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tthis.setState(`${sensorRoot}.${y}`, { val: null, ack: true });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tawait this.setObjectAndState(`${sensorRoot}`, `${y}`, channel[i][y]);\n\t\t\t\t\t\t\t\tthis.subscribeStates(`${sensorRoot}.${y}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//  Write states for pitmaster\n\t\t\t\tconst pitmaster = activeDevices[deviceIP].data.pitmaster;\n\t\t\t\tfor (const i in pitmaster.pm) {\n\t\t\t\t\tconst stateRoot = `${serial}.Pitmaster.Pitmaster_${1 + parseInt(i)}`;\n\t\t\t\t\tthis.log.debug(`Create Pitmaster states ${stateRoot}`);\n\t\t\t\t\tawait this.setObjectNotExistsAsync(stateRoot, {\n\t\t\t\t\t\ttype: 'channel',\n\t\t\t\t\t\tcommon: {\n\t\t\t\t\t\t\tname: 'Pitmaster',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnative: {},\n\t\t\t\t\t});\n\n\t\t\t\t\tfor (const y in pitmaster.pm[i]) {\n\t\t\t\t\t\tif (y === 'typ') {\n\t\t\t\t\t\t\tawait this.setObjectAndState(`${stateRoot}`, `modus`, pitmaster.pm[i][y]);\n\t\t\t\t\t\t\t// Subscribe on state\n\t\t\t\t\t\t\t// this.subscribeStates(`${stateRoot}.modus`);\n\t\t\t\t\t\t} else if (y === 'pid') {\n\t\t\t\t\t\t\tawait this.setObjectAndState(`${stateRoot}`, `${y}`, pitmaster.pm[i][y]);\n\t\t\t\t\t\t\t// Subscribe on state\n\t\t\t\t\t\t\t// this.subscribeStates(`${stateRoot}.${y}`);\n\t\t\t\t\t\t} else if (y === 'set_color') {\n\t\t\t\t\t\t\t// ignore set_color\n\t\t\t\t\t\t} else if (y === 'value_color') {\n\t\t\t\t\t\t\t// ignore set_color\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tawait this.setObjectAndState(`${stateRoot}`, `${y}`, pitmaster.pm[i][y]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.setState(`${activeDevices[deviceIP].settings.device.serial}.Info.connected`, {\n\t\t\t\t\tval: true,\n\t\t\t\t\tack: true,\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis.log.debug(`[getDeviceData] ${e}`);\n\t\t\tif (activeDevices[deviceIP].initialised) {\n\t\t\t\tthis.log.warn(`${deviceIP} Connection lost, will try to reconnect`);\n\t\t\t}\n\t\t\tactiveDevices[deviceIP].initialised = false;\n\t\t\ttry {\n\t\t\t\tthis.setState(`${activeDevices[deviceIP].settings.device.serial}.Info.connected`, {\n\t\t\t\t\tval: false,\n\t\t\t\t\tack: true,\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(e);\n\t\t\t}\n\t\t}\n\n\t\t// Clear running timer\n\t\tif (polling[deviceIP]) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t// @ts-ignore\n\t\t\tclearTimeout(polling[deviceIP]);\n\t\t\tpolling[deviceIP] = {};\n\t\t}\n\n\t\t// Timer to reload data\n\t\tthis.log.debug(`${deviceIP} Timer triggered`);\n\t\tpolling[deviceIP] = setTimeout(() => {\n\t\t\tthis.log.debug(`${deviceIP} Timer executed`);\n\t\t\tthis.getDeviceData(deviceIP);\n\t\t}, activeDevices[deviceIP].basicInfo.interval * 1000);\n\t}\n\n\tprivate async initialiseDevice(ip: string): Promise<void> {\n\t\ttry {\n\t\t\tconst device: Device = activeDevices[ip].basicInfo;\n\t\t\tconst url = `http://${device.username}:${device.password}@${device.ip}`;\n\n\t\t\t// Get Device Settings\n\t\t\tconst response_settings = await axios(url + '/settings', { timeout: 5000 });\n\t\t\tif (response_settings == null || response_settings.data == null) return;\n\t\t\tthis.log.debug(`${ip} data | ${JSON.stringify(response_settings.data)}`);\n\t\t\tconst responseData: DeviceSettings = response_settings.data;\n\t\t\t// Store all data into memory\n\t\t\tactiveDevices[device.ip].deviceURL = url;\n\t\t\tactiveDevices[device.ip].settings = responseData;\n\t\t\tactiveDevices[device.ip].initialised = true;\n\t\t\tipSerialMapping[activeDevices[device.ip].settings.device.serial] = { ip: device.ip };\n\n\t\t\tthis.log.debug(`${ip} memory cache | ${JSON.stringify(activeDevices[device.ip])}`);\n\n\t\t\t// Create channels\n\t\t\tawait this.deviceStructures(activeDevices[device.ip].settings.device.serial, device.ip);\n\t\t\t// Create States for device settings\n\t\t\tfor (const i in response_settings.data.device) {\n\t\t\t\tthis.log.debug(\n\t\t\t\t\t`Create device settings state ${activeDevices[device.ip].settings.device.serial}.Info.${i} | ${\n\t\t\t\t\t\tresponse_settings.data.device[i]\n\t\t\t\t\t}`,\n\t\t\t\t);\n\t\t\t\tawait this.setObjectAndState(\n\t\t\t\t\t`${activeDevices[device.ip].settings.device.serial}.Info`,\n\t\t\t\t\t`${i}`,\n\t\t\t\t\t`${response_settings.data.device[i]}`,\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis.log.info(\n\t\t\t\t`${ip} Connected, refreshing data every ${activeDevices[device.ip].basicInfo.interval} seconds`,\n\t\t\t);\n\t\t\tthis.getDeviceData(ip);\n\t\t} catch (e) {\n\t\t\tthis.log.debug(`[initialiseDevice] ${e}`);\n\t\t\tif (initializing) {\n\t\t\t\tthis.log.warn(`${ip} Connection failed, will try again later ${e}`);\n\t\t\t}\n\t\t\tactiveDevices[ip].initialised = false;\n\t\t}\n\t}\n\n\tprivate async deviceStructures(serial: string, ip: string): Promise<void> {\n\t\ttry {\n\t\t\tthis.createDevice(serial, {\n\t\t\t\tname: activeDevices[ip].settings.system.host,\n\t\t\t});\n\n\t\t\tfor (const object in BasicStates) {\n\t\t\t\tthis.log.debug(`Create basic state ${serial}.${object}`);\n\t\t\t\tawait this.setObjectAndState(`${serial}`, `${object}`, null);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis.log.error(`[deviceStructures] ${e}`);\n\t\t\tthis.sendSentry(`[deviceStructures] ${e}`);\n\t\t}\n\t}\n\n\tprivate async setObjectAndState(rootDIR: string, stateName: string, value: any | null): Promise<void> {\n\t\ttry {\n\t\t\tlet obj: MyObjectsDefinitions = BasicStates[stateName];\n\n\t\t\tif (!obj) {\n\t\t\t\tobj = buildCommon(stateName);\n\t\t\t}\n\n\t\t\t// Check if the object must be created\n\t\t\tif (createdObjs.indexOf(`${rootDIR}.${stateName}`) === -1) {\n\t\t\t\tawait this.setObjectNotExistsAsync(`${rootDIR}.${stateName}`, {\n\t\t\t\t\ttype: obj.type,\n\t\t\t\t\tcommon: JSON.parse(JSON.stringify(obj.common)),\n\t\t\t\t\tnative: JSON.parse(JSON.stringify(obj.native)),\n\t\t\t\t});\n\t\t\t\t// Remember created object for this runtime\n\t\t\t\tcreatedObjs.push(`${rootDIR}.${stateName}`);\n\t\t\t}\n\n\t\t\tif (obj.common.write != null && obj.common.write) {\n\t\t\t\tthis.subscribeStates(`${rootDIR}.${stateName}`);\n\t\t\t}\n\n\t\t\tif (value != null) {\n\t\t\t\tawait this.setStateChangedAsync(`${rootDIR}.${stateName}`, {\n\t\t\t\t\tval: value,\n\t\t\t\t\tack: true,\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis.log.error(`[setObjectAndState] ${e}`);\n\t\t\tthis.sendSentry(`[setObjectAndState] ${e}`);\n\t\t}\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\t// Clear running timer\n\t\t\tfor (const device in activeDevices) {\n\t\t\t\tif (polling[device]) {\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tclearTimeout(polling[device]);\n\t\t\t\t\tpolling[device] = {};\n\t\t\t\t}\n\t\t\t\tif (`${activeDevices[device]}` != null && `${activeDevices[device].settings}` != null) {\n\t\t\t\t\tthis.setState(`${activeDevices[device].settings.device.serial}.Info.connected`, {\n\t\t\t\t\t\tval: false,\n\t\t\t\t\t\tack: true,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tthis.log.error(`[onUnload] ${e}`);\n\t\t\tthis.sendSentry(`[onUnload] ${e}`);\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n\t\ttry {\n\t\t\tif (state) {\n\t\t\t\t// The state was changed\n\t\t\t\tthis.log.debug(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n\t\t\t\t//Only fire when ack = false (set by admin or script)\n\t\t\t\tif (!state.ack && state.val != null) {\n\t\t\t\t\tthis.log.debug(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n\t\t\t\t\tconst deviceId = id.split('.');\n\n\t\t\t\t\tconst deviceIP = ipSerialMapping[deviceId[2]].ip;\n\t\t\t\t\tconst url = activeDevices[deviceIP].deviceURL;\n\t\t\t\t\tthis.log.debug('Triggered state : ' + deviceId[3]);\n\t\t\t\t\t// Handle Post command for configuration related settings\n\t\t\t\t\tif (deviceId[3] === 'Configuration') {\n\t\t\t\t\t\tif (deviceId[4] === 'restart') {\n\t\t\t\t\t\t\tconst post_url = `${url}/restart`;\n\t\t\t\t\t\t\tconst response = await axios.post(post_url);\n\t\t\t\t\t\t\tthis.setState(`${id}`, { val: false, ack: true });\n\t\t\t\t\t\t\tthis.log.info(`${deviceIP} Restart requested ${response.status}`);\n\t\t\t\t\t\t\tactiveDevices[deviceIP].initialised = false;\n\t\t\t\t\t\t} else if (deviceId[4] === 'checkupdate') {\n\t\t\t\t\t\t\tconst post_url = `${url}/checkupdate`;\n\t\t\t\t\t\t\tconst response = await axios.post(post_url);\n\t\t\t\t\t\t\tthis.setState(`${id}`, { val: false, ack: true });\n\t\t\t\t\t\t\tthis.log.info(`${deviceIP} Check for updates ${response.status}`);\n\t\t\t\t\t\t} else if (deviceId[4] === 'update') {\n\t\t\t\t\t\t\tconst post_url = `${url}/update`;\n\t\t\t\t\t\t\tconst response = await axios.post(post_url);\n\t\t\t\t\t\t\tthis.setState(`${id}`, { val: false, ack: true });\n\t\t\t\t\t\t\tthis.log.info(`${deviceIP} Device update requested ${response.status}`);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.log.info(\n\t\t\t\t\t\t\t\t`${deviceIP} Device configuration changed ${deviceId[4]} ${deviceId[5]} | ${state.val}`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tactiveDevices[deviceIP].settings.system[deviceId[5]] = state.val;\n\t\t\t\t\t\t\tconst array = {\n\t\t\t\t\t\t\t\tap: activeDevices[deviceIP].settings.system.ap,\n\t\t\t\t\t\t\t\thost: activeDevices[deviceIP].settings.system.host,\n\t\t\t\t\t\t\t\tlanguage: activeDevices[deviceIP].settings.system.language,\n\t\t\t\t\t\t\t\tunit: activeDevices[deviceIP].settings.system.unit,\n\t\t\t\t\t\t\t\tautoupd: activeDevices[deviceIP].settings.system.autoupd,\n\t\t\t\t\t\t\t\thwversion: activeDevices[deviceIP].settings.system.hwversion,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tthis.sendArray(url, array, '/setsystem');\n\t\t\t\t\t\t\t// Refresh states\n\t\t\t\t\t\t\tactiveDevices[deviceIP].initialised = false;\n\t\t\t\t\t\t\tawait this.getDeviceData(deviceIP);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Handle Post command for sensor related settings\n\t\t\t\t\t} else if (deviceId[3] === 'Sensors') {\n\t\t\t\t\t\t// Update value of state change to memory\n\t\t\t\t\t\tconst sensorID = parseInt(deviceId[4].replace('Sensor_', '')) - 1;\n\n\t\t\t\t\t\tactiveDevices[deviceIP].data.channel[sensorID][deviceId[5]] = state.val;\n\t\t\t\t\t\t// Prepare configuration data as array\n\t\t\t\t\t\tconst array = {\n\t\t\t\t\t\t\tnumber: activeDevices[deviceIP].data.channel[sensorID].number,\n\t\t\t\t\t\t\tname: activeDevices[deviceIP].data.channel[sensorID].name,\n\t\t\t\t\t\t\ttyp: activeDevices[deviceIP].data.channel[sensorID].typ,\n\t\t\t\t\t\t\tmin: activeDevices[deviceIP].data.channel[sensorID].min,\n\t\t\t\t\t\t\tmax: activeDevices[deviceIP].data.channel[sensorID].max,\n\t\t\t\t\t\t\talarm: activeDevices[deviceIP].data.channel[sensorID].alarm,\n\t\t\t\t\t\t\tcolor: activeDevices[deviceIP].data.channel[sensorID].color,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tthis.log.info(\n\t\t\t\t\t\t\t`${deviceIP} Sensor configuration changed ${deviceId[4]} ${deviceId[5]} | ${state.val}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\t// Send changes\n\t\t\t\t\t\tawait this.sendArray(url, array, '/setchannels');\n\t\t\t\t\t\t// Refresh states\n\t\t\t\t\t\tawait this.getDeviceData(deviceIP);\n\t\t\t\t\t} else if (deviceId[3] === 'Pitmaster') {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tthis.log.info(\n\t\t\t\t\t\t\t\t`${deviceIP} Pitmaster configuration changed ${deviceId[4]} ${deviceId[5]} | ${state.val}`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst pitmasterID = parseInt(deviceId[4].replace('Pitmaster_', '')) - 1;\n\n\t\t\t\t\t\t\tif ([deviceId[5]].toString() !== 'modus') {\n\t\t\t\t\t\t\t\tactiveDevices[deviceIP].data.pitmaster.pm[pitmasterID][deviceId[5]] = state.val;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tactiveDevices[deviceIP].data.pitmaster.pm[pitmasterID].typ = state.val.toString();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst array = [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tid: activeDevices[deviceIP].data.pitmaster.pm[pitmasterID].id,\n\t\t\t\t\t\t\t\t\tchannel: activeDevices[deviceIP].data.pitmaster.pm[pitmasterID].channel,\n\t\t\t\t\t\t\t\t\tpid: activeDevices[deviceIP].data.pitmaster.pm[pitmasterID].pid,\n\t\t\t\t\t\t\t\t\tvalue: activeDevices[deviceIP].data.pitmaster.pm[pitmasterID].value,\n\t\t\t\t\t\t\t\t\tset: activeDevices[deviceIP].data.pitmaster.pm[pitmasterID].set,\n\t\t\t\t\t\t\t\t\ttyp: activeDevices[deviceIP].data.pitmaster.pm[pitmasterID].typ,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\tthis.sendArray(url, array, '/setpitmaster');\n\t\t\t\t\t\t\t// Refresh states\n\t\t\t\t\t\t\tawait this.getDeviceData(deviceIP);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tthis.log.error('Error in handling pitmaster state change' + e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// The state was deleted\n\t\t\t\tthis.log.debug(`state ${id} deleted`);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis.log.error(`[onStateChange] ${e}`);\n\t\t\tthis.sendSentry(`[onStateChange] ${e}`);\n\t\t}\n\t}\n\n\tprivate async sendArray(url: string | undefined, array: object, type: string): Promise<any> {\n\t\ttry {\n\t\t\tthis.log.debug(`Send array ${type} ${JSON.stringify(array)}`);\n\t\t\tif (url == null) return;\n\t\t\tconst post_url = `${url}${type}`;\n\t\t\tconst respons = axios.post(post_url, array);\n\t\t\treturn respons;\n\t\t} catch (e) {\n\t\t\tthis.log.error(`[sendArray] ${e}`);\n\t\t\tthis.sendSentry(`[sendArray] ${e}`);\n\t\t}\n\t}\n\n\tprivate sendSentry(error: string): void {\n\t\tif (this.supportsFeature && this.supportsFeature('PLUGINS')) {\n\t\t\tconst sentryInstance = this.getPluginInstance('sentry');\n\t\t\tif (sentryInstance) {\n\t\t\t\tsentryInstance.getSentryObject().captureException(error);\n\t\t\t}\n\t\t}\n\t}\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new WlanthermoNano(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new WlanthermoNano())();\n}\n"],
  "mappings": "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",
  "names": []
}
