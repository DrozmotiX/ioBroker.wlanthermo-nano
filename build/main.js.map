{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.1.1\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\nimport axios from 'axios'; // Load Axios module to allow handle http get & post\nimport { MyObjectsDefinitions, BasicStates, buildCommon } from './lib/stateDefinitions';\n\nconst activeDevices: activeDevices = {};\nconst polling: { [key: string]: object } = {};\nconst ipSerialMapping: { [key: string]: { ip: string } } = {};\nconst createdObjs: string[] = [];\nlet initializing = true;\n\nclass WlanthermoNano extends utils.Adapter {\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: 'wlanthermo-nano',\n\t\t});\n\t\tthis.on('ready', this.onReady.bind(this));\n\t\tthis.on('stateChange', this.onStateChange.bind(this));\n\t\tthis.on('unload', this.onUnload.bind(this));\n\t}\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\tthis.setState('info.connection', false, true);\n\t\tconst devices: DeviceList = this.config.deviceList;\n\t\tthis.log.info(`WLANThermo startet, loading ${devices.length} devices`);\n\t\tthis.log.debug(`Configured  devices ${devices}`);\n\n\t\t// Connect to all devices configured in Adapter Instance\n\t\tlet amountConnected = 0;\n\t\tfor (const device in devices) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t//@ts-expect-error <Array Preparation, not all attributes present yet>\n\t\t\tactiveDevices[devices[device].ip] = {};\n\t\t\tactiveDevices[devices[device].ip].basicInfo = devices[device];\n\t\t\tactiveDevices[devices[device].ip].initialised = false;\n\t\t\t// Start interval\n\t\t\tawait this.getDeviceData(devices[device].ip);\n\t\t\tif (activeDevices[devices[device].ip].initialised) {\n\t\t\t\tamountConnected = amountConnected + 1;\n\t\t\t}\n\t\t}\n\n\t\t// Adapter ready\n\t\tinitializing = false;\n\t\tthis.log.info(`WLANThermo ready, ${amountConnected} device(s) connected`);\n\t\tthis.setState('info.connection', true, true);\n\t}\n\n\tprivate async getDeviceData(deviceIP: string): Promise<void> {\n\t\ttry {\n\t\t\tif (\n\t\t\t\tactiveDevices[deviceIP] == null ||\n\t\t\t\tactiveDevices[deviceIP].deviceURL == null ||\n\t\t\t\t!activeDevices[deviceIP].initialised\n\t\t\t) {\n\t\t\t\tthis.log.debug(`${deviceIP} not initialised, try to connect`);\n\t\t\t\tawait this.initialiseDevice(deviceIP);\n\t\t\t} else {\n\t\t\t\tthis.log.debug(`${deviceIP} initialised, update data`);\n\t\t\t\tconst response_deviceData = await axios(activeDevices[deviceIP].deviceURL + '/data', { timeout: 5000 });\n\t\t\t\tactiveDevices[deviceIP].data = response_deviceData.data;\n\t\t\t\tthis.log.debug(`${deviceIP} data | ${JSON.stringify(response_deviceData.data)}`);\n\t\t\t\tconst serial: string = activeDevices[deviceIP].settings.device.serial;\n\n\t\t\t\t// Write states for configuration channel\n\t\t\t\tfor (const [key, value] of Object.entries(activeDevices[deviceIP].data.system)) {\n\t\t\t\t\tthis.log.debug(`Create configuration state ${serial}.Configuration.${key} | ${value}`);\n\t\t\t\t\tawait this.setObjectAndState(`${serial}.Configuration`, `${key}`, value);\n\t\t\t\t}\n\n\t\t\t\t// Read all sensor related settings and write to states\n\t\t\t\tconst channel = activeDevices[deviceIP].data.channel;\n\t\t\t\tfor (let i = 0; i < channel.length; i++) {\n\t\t\t\t\tconst sensorRoot = `${serial}.Sensors.Sensor_${1 + +i}`;\n\t\t\t\t\tthis.log.debug(`Create sensor states ${sensorRoot}`);\n\t\t\t\t\tawait this.setObjectNotExistsAsync(sensorRoot, {\n\t\t\t\t\t\ttype: 'channel',\n\t\t\t\t\t\tcommon: {\n\t\t\t\t\t\t\tname: channel[i].name,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnative: {},\n\t\t\t\t\t});\n\n\t\t\t\t\t// Load available sensor types\n\t\t\t\t\tconst sensorTypes: { [key: string]: string } = {};\n\t\t\t\t\tfor (const sensor in activeDevices[deviceIP].settings.sensors) {\n\t\t\t\t\t\tsensorTypes[sensor] = activeDevices[deviceIP].settings.sensors[sensor].name;\n\t\t\t\t\t}\n\n\t\t\t\t\t//  Write states for temperature sensors\n\t\t\t\t\tfor (const [key, value] of Object.entries(channel[i])) {\n\t\t\t\t\t\tswitch (key) {\n\t\t\t\t\t\t\tcase 'typ':\n\t\t\t\t\t\t\t\tawait this.setObjectAndState(`${sensorRoot}`, `${key}`, value, sensorTypes);\n\t\t\t\t\t\t\t\tthis.subscribeStates(`${sensorRoot}.${key}`);\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'alarm':\n\t\t\t\t\t\t\t\tawait this.setObjectAndState(`${sensorRoot}`, `${key}`, value, {\n\t\t\t\t\t\t\t\t\t'0': 'Disabled',\n\t\t\t\t\t\t\t\t\t'1': 'Push-Only',\n\t\t\t\t\t\t\t\t\t'2': 'Speaker-Only',\n\t\t\t\t\t\t\t\t\t'4': 'Push & Speaker',\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'temp':\n\t\t\t\t\t\t\t\tawait this.setObjectAndState(`${sensorRoot}`, `${key}`, null);\n\t\t\t\t\t\t\t\tif (channel[i][key] !== 999) {\n\t\t\t\t\t\t\t\t\tthis.setState(`${sensorRoot}.${key}`, {\n\t\t\t\t\t\t\t\t\t\tval: channel[i][key],\n\t\t\t\t\t\t\t\t\t\tack: true,\n\t\t\t\t\t\t\t\t\t\texpire: activeDevices[deviceIP].basicInfo.interval * 2000,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tthis.setState(`${sensorRoot}.${key}`, { val: null, ack: true });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tawait this.setObjectAndState(`${sensorRoot}`, `${key}`, value);\n\t\t\t\t\t\t\t\tthis.subscribeStates(`${sensorRoot}.${key}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t//  Write states for pitmaster\n\t\t\t\t\tif (activeDevices[deviceIP].data.pitmaster != null) {\n\t\t\t\t\t\tconst pitmaster = activeDevices[deviceIP].data.pitmaster;\n\t\t\t\t\t\tfor (let i = 0; i < pitmaster.pm.length; i++) {\n\t\t\t\t\t\t\tconst stateRoot = `${serial}.Pitmaster.Pitmaster_${1 + i}`;\n\t\t\t\t\t\t\tthis.log.debug(`Create Pitmaster states ${stateRoot}`);\n\t\t\t\t\t\t\tawait this.setObjectNotExistsAsync(stateRoot, {\n\t\t\t\t\t\t\t\ttype: 'channel',\n\t\t\t\t\t\t\t\tcommon: {\n\t\t\t\t\t\t\t\t\tname: 'Pitmaster',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tnative: {},\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tfor (const [key, value] of Object.entries(pitmaster.pm[i])) {\n\t\t\t\t\t\t\t\tif (key === 'typ') {\n\t\t\t\t\t\t\t\t\tawait this.setObjectAndState(`${stateRoot}`, `modus`, value);\n\t\t\t\t\t\t\t\t\t// Subscribe on state\n\t\t\t\t\t\t\t\t\t// this.subscribeStates(`${stateRoot}.modus`);\n\t\t\t\t\t\t\t\t} else if (key === 'pid') {\n\t\t\t\t\t\t\t\t\tawait this.setObjectAndState(`${stateRoot}`, `${key}`, value);\n\t\t\t\t\t\t\t\t\t// Subscribe on state\n\t\t\t\t\t\t\t\t\t// this.subscribeStates(`${stateRoot}.${y}`);\n\t\t\t\t\t\t\t\t} else if (key === 'id') {\n\t\t\t\t\t\t\t\t\tconst pidProfiles: { [key: string]: string } = {};\n\t\t\t\t\t\t\t\t\tfor (const profile in activeDevices[deviceIP].settings.pid) {\n\t\t\t\t\t\t\t\t\t\tpidProfiles[profile] = activeDevices[deviceIP].settings.pid[profile].name;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tawait this.setObjectAndState(`${stateRoot}`, `${key}`, value, pidProfiles);\n\t\t\t\t\t\t\t\t\t// ignore set_color\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tawait this.setObjectAndState(`${stateRoot}`, `${key}`, value);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setState(`${activeDevices[deviceIP].settings.device.serial}.Info.connected`, {\n\t\t\t\t\t\t\tval: true,\n\t\t\t\t\t\t\tack: true,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.errorHandler(`[getDeviceData]`, error, true);\n\t\t\tif (activeDevices[deviceIP].initialised) {\n\t\t\t\tthis.log.warn(`${deviceIP} Connection lost, will try to reconnect`);\n\t\t\t}\n\t\t\tactiveDevices[deviceIP].initialised = false;\n\t\t\ttry {\n\t\t\t\tthis.setState(`${activeDevices[deviceIP].settings.device.serial}.Info.connected`, {\n\t\t\t\t\tval: false,\n\t\t\t\t\tack: true,\n\t\t\t\t});\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\t\t}\n\n\t\t// Clear running timer\n\t\tif (polling[deviceIP]) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t// @ts-ignore\n\t\t\tclearTimeout(polling[deviceIP]);\n\t\t\tpolling[deviceIP] = {};\n\t\t}\n\n\t\t// Timer to reload data\n\t\tthis.log.debug(`${deviceIP} Timer triggered`);\n\t\tpolling[deviceIP] = setTimeout(() => {\n\t\t\tthis.log.debug(`${deviceIP} Timer executed`);\n\t\t\tthis.getDeviceData(deviceIP);\n\t\t}, activeDevices[deviceIP].basicInfo.interval * 1000);\n\t}\n\n\tprivate async initialiseDevice(ip: string): Promise<void> {\n\t\ttry {\n\t\t\tconst device: Device = activeDevices[ip].basicInfo;\n\t\t\tconst url = `http://${device.username}:${device.password}@${device.ip}`;\n\n\t\t\t// Get Device Settings\n\t\t\tconst response_settings = await axios(url + '/settings', { timeout: 5000 });\n\t\t\tif (response_settings == null || response_settings.data == null) return;\n\t\t\tthis.log.debug(`${ip} data | ${JSON.stringify(response_settings.data)}`);\n\t\t\tconst responseData: DeviceSettings = response_settings.data;\n\t\t\t// Store all data into memory\n\t\t\tactiveDevices[device.ip].deviceURL = url;\n\t\t\tactiveDevices[device.ip].settings = responseData;\n\t\t\tactiveDevices[device.ip].initialised = true;\n\t\t\tipSerialMapping[activeDevices[device.ip].settings.device.serial] = { ip: device.ip };\n\n\t\t\tthis.log.debug(`${ip} memory cache | ${JSON.stringify(activeDevices[device.ip])}`);\n\n\t\t\t// Create channels\n\t\t\tawait this.deviceStructures(activeDevices[device.ip].settings.device.serial, device.ip);\n\t\t\t// Create States for device settings\n\t\t\tfor (const i in response_settings.data.device) {\n\t\t\t\tthis.log.debug(\n\t\t\t\t\t`Create device settings state ${activeDevices[device.ip].settings.device.serial}.Info.${i} | ${\n\t\t\t\t\t\tresponse_settings.data.device[i]\n\t\t\t\t\t}`,\n\t\t\t\t);\n\t\t\t\tawait this.setObjectAndState(\n\t\t\t\t\t`${activeDevices[device.ip].settings.device.serial}.Info`,\n\t\t\t\t\t`${i}`,\n\t\t\t\t\t`${response_settings.data.device[i]}`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Create states for features channel\n\t\t\tif (activeDevices[device.ip].settings.features != null) {\n\t\t\t\tfor (const [key, value] of Object.entries(activeDevices[device.ip].settings.features)) {\n\t\t\t\t\tthis.log.debug(\n\t\t\t\t\t\t`Create feature state ${\n\t\t\t\t\t\t\tactiveDevices[device.ip].settings.device.serial\n\t\t\t\t\t\t}.features.${key} | ${value}`,\n\t\t\t\t\t);\n\t\t\t\t\tawait this.setObjectAndState(\n\t\t\t\t\t\t`${activeDevices[device.ip].settings.device.serial}.Features`,\n\t\t\t\t\t\t`${key}`,\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Create states for PID Profile\n\t\t\tif (activeDevices[device.ip].settings.pid != null) {\n\t\t\t\tconst pidProfile = activeDevices[device.ip].settings.pid;\n\t\t\t\tfor (let i = 0; i < pidProfile.length; i++) {\n\t\t\t\t\tconst sensorRoot = `${activeDevices[device.ip].settings.device.serial}.Pitmaster.Profiles.Profile_${\n\t\t\t\t\t\t1 + +i\n\t\t\t\t\t}`;\n\t\t\t\t\tthis.log.debug(`Create profile states ${sensorRoot}`);\n\t\t\t\t\tawait this.setObjectNotExistsAsync(sensorRoot, {\n\t\t\t\t\t\ttype: 'channel',\n\t\t\t\t\t\tcommon: {\n\t\t\t\t\t\t\tname: pidProfile[i].name,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnative: {},\n\t\t\t\t\t});\n\n\t\t\t\t\t//  Write states for PID profiles\n\t\t\t\t\tfor (const [key, value] of Object.entries(pidProfile[i])) {\n\t\t\t\t\t\tawait this.setObjectAndState(`${sensorRoot}`, `${key}`, value);\n\t\t\t\t\t\tthis.subscribeStates(`${sensorRoot}.${key}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.log.info(\n\t\t\t\t`${ip} Connected, refreshing data every ${activeDevices[device.ip].basicInfo.interval} seconds`,\n\t\t\t);\n\t\t\tthis.getDeviceData(ip);\n\t\t} catch (error) {\n\t\t\tthis.errorHandler(`[initialiseDevice]`, error, true);\n\t\t\tif (initializing) {\n\t\t\t\tthis.log.warn(`${ip} Connection failed, will try again later ${error}`);\n\t\t\t}\n\t\t\tactiveDevices[ip].initialised = false;\n\t\t}\n\t}\n\n\tprivate async deviceStructures(serial: string, ip: string): Promise<void> {\n\t\ttry {\n\t\t\tthis.createDevice(serial, {\n\t\t\t\tname: activeDevices[ip].settings.system.host,\n\t\t\t});\n\n\t\t\tfor (const object in BasicStates) {\n\t\t\t\tthis.log.debug(`Create basic state ${serial}.${object}`);\n\t\t\t\tawait this.setObjectAndState(`${serial}`, `${object}`, null);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.errorHandler(`[deviceStructures]`, error);\n\t\t}\n\t}\n\n\tprivate async setObjectAndState(\n\t\trootDIR: string,\n\t\tstateName: string,\n\t\tvalue: any | null,\n\t\tstateDropDown?: { [key: string]: string },\n\t): Promise<void> {\n\t\ttry {\n\t\t\tlet obj: MyObjectsDefinitions = BasicStates[stateName];\n\n\t\t\tif (!obj) {\n\t\t\t\tobj = buildCommon(stateName);\n\t\t\t}\n\n\t\t\tif (stateDropDown != null) {\n\t\t\t\tobj.common.states = stateDropDown;\n\t\t\t}\n\n\t\t\t// Check if the object must be created\n\t\t\tif (createdObjs.indexOf(`${rootDIR}.${stateName}`) === -1) {\n\t\t\t\tawait this.extendObjectAsync(`${rootDIR}.${stateName}`, {\n\t\t\t\t\ttype: obj.type,\n\t\t\t\t\tcommon: JSON.parse(JSON.stringify(obj.common)),\n\t\t\t\t\tnative: JSON.parse(JSON.stringify(obj.native)),\n\t\t\t\t});\n\t\t\t\t// Remember created object for this runtime\n\t\t\t\tcreatedObjs.push(`${rootDIR}.${stateName}`);\n\t\t\t}\n\n\t\t\tif (obj.common.write != null && obj.common.write) {\n\t\t\t\tthis.subscribeStates(`${rootDIR}.${stateName}`);\n\t\t\t}\n\n\t\t\tif (value != null) {\n\t\t\t\tawait this.setStateChangedAsync(`${rootDIR}.${stateName}`, {\n\t\t\t\t\tval: value,\n\t\t\t\t\tack: true,\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.errorHandler(`[setObjectAndState]`, error);\n\t\t}\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\t// Clear running timer\n\t\t\tif (activeDevices != null) {\n\t\t\t\tfor (const device in activeDevices) {\n\t\t\t\t\tif (polling != null && polling[device] != null) {\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tclearTimeout(polling[device]);\n\t\t\t\t\t\tpolling[device] = {};\n\t\t\t\t\t}\n\t\t\t\t\tif (activeDevices[device] != null && activeDevices[device].settings != null) {\n\t\t\t\t\t\tthis.setState(`${activeDevices[device].settings.device.serial}.Info.connected`, {\n\t\t\t\t\t\t\tval: false,\n\t\t\t\t\t\t\tack: true,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcallback();\n\t\t} catch (error) {\n\t\t\tthis.errorHandler(`[onUnload]`, error);\n\t\t\tcallback();\n\t\t}\n\t}\n\n\tprivate errorHandler(source: string, error: unknown, debugMode?: boolean): void {\n\t\tlet message = error;\n\t\tif (error instanceof Error && error.stack != null) message = error.stack;\n\t\tif (!debugMode) {\n\t\t\tthis.log.error(`${source} ${error}`);\n\t\t\tthis.sendSentry(`${source} ${message}`);\n\t\t} else {\n\t\t\tthis.log.debug(`${source} ${error}`);\n\t\t\tthis.log.debug(`${source} ${message}`);\n\t\t}\n\t}\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n\t\ttry {\n\t\t\tif (state) {\n\t\t\t\t// The state was changed\n\t\t\t\tthis.log.debug(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n\t\t\t\t//Only fire when ack = false (set by admin or script)\n\t\t\t\tif (!state.ack && state.val != null) {\n\t\t\t\t\tthis.log.debug(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n\t\t\t\t\tconst deviceId = id.split('.');\n\n\t\t\t\t\tconst deviceIP = ipSerialMapping[deviceId[2]].ip;\n\t\t\t\t\tconst url = activeDevices[deviceIP].deviceURL;\n\t\t\t\t\tthis.log.debug('Triggered state : ' + deviceId[3]);\n\t\t\t\t\t// Handle Post command for configuration related settings\n\t\t\t\t\tif (deviceId[3] === 'Configuration') {\n\t\t\t\t\t\tif (deviceId[4] === 'restart') {\n\t\t\t\t\t\t\tconst post_url = `${url}/restart`;\n\t\t\t\t\t\t\tconst response = await axios.post(post_url);\n\t\t\t\t\t\t\tthis.setState(`${id}`, { val: false, ack: true });\n\t\t\t\t\t\t\tthis.log.info(`${deviceIP} Restart requested ${response.status}, reconnecting device`);\n\t\t\t\t\t\t\tactiveDevices[deviceIP].initialised = false;\n\t\t\t\t\t\t} else if (deviceId[4] === 'checkupdate') {\n\t\t\t\t\t\t\tconst post_url = `${url}/checkupdate`;\n\t\t\t\t\t\t\tconst response = await axios.post(post_url);\n\t\t\t\t\t\t\tthis.setState(`${id}`, { val: false, ack: true });\n\t\t\t\t\t\t\tthis.log.info(`${deviceIP} Check for updates ${response.status}`);\n\t\t\t\t\t\t} else if (deviceId[4] === 'update') {\n\t\t\t\t\t\t\tconst post_url = `${url}/update`;\n\t\t\t\t\t\t\tconst response = await axios.post(post_url);\n\t\t\t\t\t\t\tthis.setState(`${id}`, { val: false, ack: true });\n\t\t\t\t\t\t\tthis.log.info(`${deviceIP} Device update requested ${response.status}`);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.log.info(\n\t\t\t\t\t\t\t\t`${deviceIP} Device configuration changed ${deviceId[4]} ${deviceId[5]} | ${state.val}, reconnecting device`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tactiveDevices[deviceIP].settings.system[deviceId[5]] = state.val;\n\t\t\t\t\t\t\tconst array = {\n\t\t\t\t\t\t\t\tap: activeDevices[deviceIP].settings.system.ap,\n\t\t\t\t\t\t\t\thost: activeDevices[deviceIP].settings.system.host,\n\t\t\t\t\t\t\t\tlanguage: activeDevices[deviceIP].settings.system.language,\n\t\t\t\t\t\t\t\tunit: activeDevices[deviceIP].settings.system.unit,\n\t\t\t\t\t\t\t\tautoupd: activeDevices[deviceIP].settings.system.autoupd,\n\t\t\t\t\t\t\t\thwversion: activeDevices[deviceIP].settings.system.hwversion,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tthis.sendArray(url, array, '/setsystem');\n\t\t\t\t\t\t\t// Refresh states\n\t\t\t\t\t\t\tactiveDevices[deviceIP].initialised = false;\n\t\t\t\t\t\t\tawait this.getDeviceData(deviceIP);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Handle Post command for sensor related settings\n\t\t\t\t\t} else if (deviceId[3] === 'Sensors') {\n\t\t\t\t\t\t// Update value of state change to memory\n\t\t\t\t\t\tconst sensorID = parseInt(deviceId[4].replace('Sensor_', '')) - 1;\n\t\t\t\t\t\tconst currentSensor = activeDevices[deviceIP].data.channel[sensorID];\n\n\t\t\t\t\t\t(currentSensor as any)[deviceId[5]] = state.val;\n\n\t\t\t\t\t\tthis.log.info(\n\t\t\t\t\t\t\t`${deviceIP} Sensor configuration changed ${deviceId[4]} ${deviceId[5]} | ${state.val}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\t// Send changes\n\t\t\t\t\t\tawait this.sendArray(url, activeDevices[deviceIP].data.channel[sensorID], '/setchannels');\n\t\t\t\t\t\t// Refresh states\n\t\t\t\t\t\tawait this.getDeviceData(deviceIP);\n\t\t\t\t\t} else if (deviceId[3] === 'Pitmaster') {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif ([deviceId[4]].toString() === 'Profiles') {\n\t\t\t\t\t\t\t\t// Changing profile ID is not allowed\n\t\t\t\t\t\t\t\tif (deviceId[6].toString() === 'id') return;\n\t\t\t\t\t\t\t\tconst profileID = parseInt(deviceId[5].replace('Profile_', '')) - 1;\n\t\t\t\t\t\t\t\tconst currentProfiles = activeDevices[deviceIP].settings.pid;\n\t\t\t\t\t\t\t\t(currentProfiles as any)[profileID][deviceId[6]] = state.val;\n\n\t\t\t\t\t\t\t\tthis.sendArray(url, currentProfiles, '/setpid');\n\t\t\t\t\t\t\t\tthis.log.info(\n\t\t\t\t\t\t\t\t\t`${deviceIP} Pitmaster profile ${profileID} changed ${deviceId[6]} | ${state.val}, reconnecting device`,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t// Refresh states\n\t\t\t\t\t\t\t\tactiveDevices[deviceIP].initialised = false;\n\t\t\t\t\t\t\t\tawait this.getDeviceData(deviceIP);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconst pitmasterID = parseInt(deviceId[4].replace('Pitmaster_', '')) - 1;\n\t\t\t\t\t\t\t\tthis.log.info(\n\t\t\t\t\t\t\t\t\t`${deviceIP} Pitmaster ${pitmasterID} configuration changed ${deviceId[5]} | ${state.val}`,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tconst currentPM = activeDevices[deviceIP].data.pitmaster.pm[pitmasterID];\n\n\t\t\t\t\t\t\t\tif ([deviceId[5]].toString() !== 'modus') {\n\t\t\t\t\t\t\t\t\t(currentPM as any)[deviceId[5]] = state.val;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcurrentPM.typ = state.val.toString();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tthis.sendArray(url, activeDevices[deviceIP].data.pitmaster.pm, '/setpitmaster');\n\t\t\t\t\t\t\t\t// Refresh states\n\t\t\t\t\t\t\t\tawait this.getDeviceData(deviceIP);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tthis.log.error('Error in handling pitmaster state change' + e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// The state was deleted\n\t\t\t\tthis.log.debug(`state ${id} deleted`);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.errorHandler(`[onStateChange]`, error);\n\t\t}\n\t}\n\n\tprivate async sendArray(url: string | undefined, array: object, type: string): Promise<any> {\n\t\ttry {\n\t\t\tthis.log.debug(`Send array ${type} ${JSON.stringify(array)}`);\n\t\t\tif (url == null) return;\n\t\t\tconst post_url = `${url}${type}`;\n\t\t\tconst respons = axios.post(post_url, array);\n\t\t\treturn respons;\n\t\t} catch (error) {\n\t\t\tthis.errorHandler(`[onStateChange]`, error);\n\t\t}\n\t}\n\n\tprivate sendSentry(error: string): void {\n\t\tif (this.supportsFeature && this.supportsFeature('PLUGINS')) {\n\t\t\tconst sentryInstance = this.getPluginInstance('sentry');\n\t\t\tif (sentryInstance) {\n\t\t\t\tsentryInstance.getSentryObject().captureException(error);\n\t\t\t}\n\t\t}\n\t}\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new WlanthermoNano(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new WlanthermoNano())();\n}\n"],
  "mappings": "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",
  "names": []
}
